<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.haiqing.conference.dao.PersonnelMapper">
    <resultMap id="BaseResultMap" type="com.haiqing.conference.pojo.Personnel">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="department" property="department" jdbcType="VARCHAR"/>
        <result column="profession" property="profession" jdbcType="VARCHAR"/>
        <result column="sex" property="sex" jdbcType="TINYINT"/>
        <result column="create_at" property="createAt" jdbcType="BIGINT"/>
        <result column="create_by" property="createBy" jdbcType="INTEGER"/>
        <result column="updata_at" property="updataAt" jdbcType="BIGINT"/>
        <result column="updata_by" property="updataBy" jdbcType="INTEGER"/>
    </resultMap>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from personnel
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="com.haiqing.conference.pojo.Personnel">
    insert into personnel (id, name, department, 
      profession, sex, create_at, 
      create_by, updata_at, updata_by
      )
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{department,jdbcType=VARCHAR}, 
      #{profession,jdbcType=VARCHAR}, #{sex,jdbcType=TINYINT}, #{createAt,jdbcType=BIGINT}, 
      #{createBy,jdbcType=INTEGER}, #{updataAt,jdbcType=BIGINT}, #{updataBy,jdbcType=INTEGER}
      )
  </insert>
    <update id="updateByPrimaryKey" parameterType="com.haiqing.conference.pojo.Personnel">
    update personnel
    set name = #{name,jdbcType=VARCHAR},
      department = #{department,jdbcType=VARCHAR},
      profession = #{profession,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=TINYINT},
      create_at = #{createAt,jdbcType=BIGINT},
      create_by = #{createBy,jdbcType=INTEGER},
      updata_at = #{updataAt,jdbcType=BIGINT},
      updata_by = #{updataBy,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
    <!--根据id查询人员的信息-->
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
    select id, name, department, profession, sex, create_at, create_by, updata_at, updata_by
    from personnel
    where id = #{id,jdbcType=INTEGER}
  </select>
    <!--查询全部的人员信息，分页-->
    <select id="selectAll" resultMap="BaseResultMap" parameterType="map">
        select id, name, department, profession, sex, create_at, create_by, updata_at, updata_by
        from personnel
        order by updata_at desc
        <if test="start!=null and size!=null">
            limit #{start},#{size}
        </if>
    </select>
    <!--根据姓名模糊查询人员信息-->
    <select id="selectByName" resultMap="BaseResultMap" parameterType="String">
        select id, name, department, profession, sex, create_at, create_by, updata_at, updata_by
        from personnel
        where
        <bind name="name" value="'%'+name+'%'"/>
        name like #{name,jdbcType=VARCHAR}
    </select>
    <!--根据姓名查询人员信息-->
    <select id="selectByNameEqual" resultMap="BaseResultMap" parameterType="String">
        select id, name, department, profession, sex, create_at, create_by, updata_at, updata_by
        from personnel
        where
        name = #{name,jdbcType=VARCHAR}
    </select>
    <!--根据ids（人员id的数组）查询人员信息-->
    <select id="selectByIds" parameterType="map" resultMap="BaseResultMap">
        select id, name, department, profession, sex, create_at, create_by, updata_at, updata_by
        from personnel
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>
    <!--动态的更新人员信息-->
    <update id="updateBySelective" parameterType="com.haiqing.conference.pojo.Personnel">
        update personnel
        <set>
            <if test="name !=null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="department != null">
                department = #{department,jdbcType=VARCHAR},
            </if>
            <if test="profession != null">
                profession = #{profession,jdbcType=VARCHAR},
            </if>
            <if test="sex != null">
                sex = #{sex,jdbcType=TINYINT},
            </if>
            <if test="createBy != null">
                create_by = #{createBy,jdbcType=INTEGER},
            </if>
            <if test="updataBy != null">
                updata_by = #{updataBy,jdbcType=INTEGER},
            </if>
            <if test="updataAt != null">
                updata_at = #{updataAt,jdbcType=BIGINT},
            </if>
            <if test="createAt != null">
                create_at = #{createAt,jdbcType=BIGINT},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>


</mapper>